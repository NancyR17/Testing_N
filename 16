import croniter
import datetime
import psycopg2
import csv
import os
import sys
from typing import List, Tuple, Optional, Dict, Any

# --- Configuration: Read from Environment Variables (for main DB) ---
# For LOCAL TESTING, you can hardcode your Dev Read-Only DB credentials directly here:
DB_HOST = "your_dev_db_host"  # <--- REPLACE with your DB Host
DB_PORT = "5432"              # <--- REPLACE with your DB Port
DB_NAME = "your_dev_db_name"  # <--- REPLACE with your DB Name
DB_USER = "your_dev_db_user"  # <--- REPLACE with your DB User
DB_PASSWORD = "your_dev_db_password" # <--- REPLACE with your DB Password

# If you prefer using environment variables even for local testing,
# uncomment these lines and comment out the hardcoded ones above:
# DB_HOST = os.getenv("DB_HOST", "localhost")
# DB_PORT = os.getenv("DB_PORT", "5432")
# DB_NAME = os.getenv("DB_NAME", "your_database")
# DB_USER = os.getenv("DB_USER", "your_user")
# DB_PASSWORD = os.getenv("DB_PASSWORD", "your_password")

# --- CSV Configuration ---
CSV_FILE_NAME = "cron_quartz_sync_report.csv"
# --- End CSV Configuration ---

def convert_quartz_to_unix_cron(quartz_expression: str) -> Tuple[Optional[str], str]:
    """
    Attempts to convert a Quartz cron expression to a 5-field Unix cron expression.
    Returns (unix_cron_expression, status_message).
    Returns (None, error_message) if conversion is not possible or problematic.

    This function handles common Quartz patterns. More complex Quartz-specific
    features like 'L', 'W', '#', and the optional year field are noted as warnings
    or make the conversion impossible for a direct Unix equivalent.
    """
    parts = quartz_expression.split()
    
    # Quartz cron has 6 or 7 fields: seconds, minutes, hours, day-of-month, month, day-of-week, [year]
    # Unix cron has 5 fields: minutes, hours, day-of-month, month, day-of-week

    if not (6 <= len(parts) <= 7):
        return None, "INVALID_QUARTZ_FORMAT: Expected 6 or 7 fields."

    seconds_field = parts[0]
    minutes_field = parts[1]
    hours_field = parts[2]
    day_of_month_field = parts[3]
    month_field = parts[4]
    day_of_week_field = parts[5]
    year_field = parts[6] if len(parts) == 7 else None

    # Handle seconds field: Unix cron doesn't have seconds.
    # If seconds is not '0' or '*', it's problematic for direct Unix conversion.
    if seconds_field not in ['0', '*']:
        return None, f"UNSUPPORTED_QUARTZ_SECONDS: Quartz seconds field '{seconds_field}' cannot be directly converted to Unix cron."
    
    # Handle Quartz '?' (no specific value)
    # In Unix cron, this implies '*'
    # If '?' is in both day-of-month and day-of-week, croniter might have issues, but generally it means "no specific value for this field"
    # Unix cron typically allows only one of day-of-month or day-of-week to be '*', with the other being a specific value.
    # However, croniter usually handles this by picking whichever is more restrictive if both are '*'.
    # For simplicity, we just convert '?' to '*' as it often represents "any" in a Unix context.
    if day_of_month_field == '?':
        day_of_month_field = '*'
    if day_of_week_field == '?':
        day_of_week_field = '*'

    # Handle Quartz 'L' (Last) and 'W' (Weekday nearest) and '#' (Nth day of week)
    # These are not directly convertible to standard 5-field Unix cron.
    for field in [day_of_month_field, day_of_week_field]:
        if 'L' in field or 'W' in field or '#' in field:
            return None, f"UNSUPPORTED_QUARTZ_FEATURE: Quartz specific operators 'L', 'W', '#' in '{field}' cannot be directly converted to Unix cron."

    # Handle optional year field
    if year_field and year_field != '*' and year_field != '?': # '?' is technically not valid for year in Quartz, but good to cover.
        # If a specific year is set, the cron job might only run in that year,
        # which is not representable in a 5-field Unix cron.
        return None, f"UNSUPPORTED_QUARTZ_YEAR: Specific year '{year_field}' cannot be directly converted to Unix cron."
    
    # Assemble the Unix cron expression (minutes, hours, day-of-month, month, day-of-week)
    unix_cron_expression_parts = [
        minutes_field,
        hours_field,
        day_of_month_field,
        month_field,
        day_of_week_field
    ]
    
    unix_cron_expression = " ".join(unix_cron_expression_parts)
    return unix_cron_expression, "SUCCESS"


def calculate_cron_times(reference_time: datetime.datetime, cron_expression: str) -> Tuple[Optional[datetime.datetime], Optional[datetime.datetime]]:
    """
    Calculates the single previous and next fire times for a given cron expression
    relative to a given reference_time using croniter.
    """
    previous_fire_time = None
    next_fire_time = None

    try:
        iter_prev = croniter.croniter(cron_expression, reference_time)
        # --- DEBUG LINE ---
        print(f"DEBUG: Type of iter_prev: {type(iter_prev)}, Value: {iter_prev}") 
        # --- END DEBUG LINE ---
        
        # --- DIAGNOSTIC TEST FOR 'get_prev' ATTRIBUTE ---
        if not hasattr(iter_prev, 'get_prev'): # Changed to 'get_prev'
            print("ERROR: 'croniter' object explicitly does NOT have 'get_prev' attribute! Please check croniter installation.")
            return None, None 
        
        try:
            test_prev = iter_prev.get_prev(datetime.datetime) # Changed to .get_prev()
            print(f"DEBUG: Direct test of .get_prev() successful. Result: {test_prev}")
        except Exception as test_e:
            print(f"DEBUG: Direct test of .get_prev() failed: {test_e}")
        # --- END OF DIAGNOSTIC TEST ---

        previous_fire_time = iter_prev.get_prev(datetime.datetime) # Changed to .get_prev()
    except StopIteration:
        pass 
    except croniter.CroniterBadCronError:
        print(f"Error: Invalid cron expression for croniter (prev): '{cron_expression}'. This might be due to Quartz-specific features not supported by croniter.")
        return None, None
    except Exception as e:
        print(f"Error calculating previous cron time for '{cron_expression}': {e}")
        return None, None

    # Only try to calculate next fire time if a previous one was successfully found
    if previous_fire_time:
        try:
            # For next fire time, start iterator from just before previous for consistency with 'get_next' method
            iter_next = croniter.croniter(cron_expression, previous_fire_time)
            next_fire_time = iter_next.get_next(datetime.datetime) # Changed to .get_next()
        except StopIteration:
            pass
        except croniter.CroniterBadCronError:
            print(f"Error: Invalid cron expression for croniter (next): '{cron_expression}'. This might be due to Quartz-specific features not supported by croniter.")
            return None, None
        except Exception as e:
            print(f"Error calculating next cron time for '{cron_expression}': {e}")
            return None, None
            
    return previous_fire_time, next_fire_time

def fetch_cron_triggers_from_db(connection_params: dict) -> List[Tuple[str, str, int, Optional[datetime.datetime], Optional[datetime.datetime]]]:
    """
    Fetches cron trigger information from the QRTZ database tables (triggers and cron_triggers),
    converting epoch milliseconds to datetime objects.
    """
    print(f"DEBUG: Attempting to connect to DB: {connection_params['host']}:{connection_params['port']}/{connection_params['database']}")
    try:
        conn = psycopg2.connect(**connection_params)
        cursor = conn.cursor()
        print("DEBUG: Successfully connected to the database.")
        cursor.execute("""
            SELECT
                t.trigger_name,
                ct.cron_expression,
                t.priority,
                CASE
                    WHEN t.next_fire_time IS NOT NULL THEN to_timestamp(t.next_fire_time / 1000)
                    ELSE NULL
                END as next_fire_time,
                CASE
                    WHEN t.prev_fire_time IS NOT NULL THEN to_timestamp(t.prev_fire_time / 1000)
                    ELSE NULL
                END as prev_fire_time
            FROM
                "SVC_PHM_OWNER".phm_ntfn_qrtz_triggers t
            JOIN
                "SVC_PHM_OWNER".phm_ntfn_qrtz_cron_triggers ct ON t.trigger_name = ct.trigger_name AND t.trigger_group = ct.trigger_group
            WHERE
                t.trigger_type = 'CRON'
            ORDER BY
                t.trigger_name;
        """)
        triggers = cursor.fetchall()
        conn.close()
        print(f"DEBUG: Fetched {len(triggers)} cron triggers from the database.")
        return [
            (row[0], row[1], row[2], row[3], row[4])
            for row in triggers
        ]
    except psycopg2.Error as e:
        print(f"ERROR: Database connection or query failed: {e}")
        return []
    except Exception as e:
        print(f"ERROR: General error fetching QRTZ trigger data: {e}")
        return []


def analyze_cron_quartz_sync(
    db_triggers: List[Tuple[str, str, int, Optional[datetime.datetime], Optional[datetime.datetime]]],
    current_analysis_time: datetime.datetime,
) -> None:
    """
    Analyzes cron triggers by comparing croniter-calculated previous/next fire times
    with Quartz's recorded prev_fire_time and next_fire_time from the database.
    Prints detailed output to console and writes to CSV.
    """
    print("-" * 80)
    print(f"Cron-Quartz Sync Analysis (Current Time: {current_analysis_time.isoformat()})")
    print("-" * 80)
    
    csv_data: List[Dict[str, Any]] = []
    # CSV Header
    csv_data.append({
        "Trigger_Name": "Trigger Name",
        "Original_Quartz_Cron_Expression": "Original Quartz Cron Expression",
        "Converted_Unix_Cron_Expression": "Converted Unix Cron Expression",
        "Conversion_Status": "Conversion Status",
        "DB_Quartz_Prev_Fire_Time": "DB Quartz Prev Fire Time (UTC)",
        "Croniter_Calculated_Prev_Fire_Time": "Croniter Prev Fire Time (UTC)",
        "Prev_Time_Sync_Status": "Prev Time Sync Status",
        "DB_Quartz_Next_Fire_Time": "DB Quartz Next Fire Time (UTC)",
        "Croniter_Calculated_Next_Fire_Time": "Croniter Next Fire Time (UTC)",
        "Next_Time_Sync_Status": "Next Time Sync Status",
        "Overall_Sync_Summary": "Overall Sync Summary"
    })
    
    # Tolerance for matching timestamps (e.g., 5 minutes for a 15-min check, adjust as needed)
    tolerance = datetime.timedelta(minutes=5)  
    
    for trigger_name, original_cron_expression, priority, db_next_fire_time_quartz, db_prev_fire_time_quartz in db_triggers:
        print(f"\nAnalyzing Trigger: {trigger_name}")
        print(f"  Original Quartz Cron: '{original_cron_expression}'")
        print(f"  Priority: {priority}")
        
        unix_cron_expression, conversion_status = convert_quartz_to_unix_cron(original_cron_expression)

        # Initialize these for safety, especially if conversion fails or croniter returns None
        croniter_prev_fire_time = None
        croniter_next_fire_time = None

        if unix_cron_expression:
            print(f"  Converted Unix Cron: '{unix_cron_expression}' (Status: {conversion_status})")
            # Calculate expected prev and next fire times using croniter based on current_analysis_time
            croniter_prev_fire_time, croniter_next_fire_time = calculate_cron_times(current_analysis_time, unix_cron_expression)
        else:
            print(f"  Conversion to Unix Cron FAILED: {conversion_status}")
            conversion_status = f"FAILED: {conversion_status}" # Update status for CSV

        # Initialize sync statuses and summary for each trigger
        prev_sync_status = "N/A"
        next_sync_status = "N/A"
        overall_sync_summary = "N/A" # Default, will be updated

        if unix_cron_expression: # Only proceed with sync analysis if conversion was successful
            # --- Compare Previous Fire Times ---
            if croniter_prev_fire_time:
                print(f"  Croniter Calc Prev: {croniter_prev_fire_time.isoformat()}")
                # Ensure db_prev_fire_time_quartz is not None before calling isoformat
                print(f"  DB Quartz Prev:   {db_prev_fire_time_quartz.isoformat() if db_prev_fire_time_quartz else 'None'}")
                
                if db_prev_fire_time_quartz is None:
                    prev_sync_status = "DB_QUARTZ_PREV_MISSING"
                    overall_sync_summary = "DEVIATION: DB Quartz Prev Fire Time is missing."
                elif abs(croniter_prev_fire_time - db_prev_fire_time_quartz) <= tolerance:
                    prev_sync_status = "IN_SYNC"
                else:
                    prev_sync_status = "PREV_TIME_MISMATCH"
                    overall_sync_summary = f"DEVIATION: Prev Fire Time Mismatch. Expected {croniter_prev_fire_time.isoformat()}, DB had {db_prev_fire_time_quartz.isoformat()}"
            else: # croniter_prev_fire_time is None
                prev_sync_status = "NO_CRONITER_PREV"
                # If DB Quartz Prev is also None, it might be expected (e.g., brand new trigger)
                if db_prev_fire_time_quartz is None:
                    overall_sync_summary = "INFO: No Prev Fire Time (DB & Croniter)."
                else:
                    overall_sync_summary = "DEVIATION: Croniter cannot calculate Prev."


            # --- Compare Next Fire Times ---
            if croniter_next_fire_time:
                print(f"  Croniter Calc Next: {croniter_next_fire_time.isoformat()}")
                # Ensure db_next_fire_time_quartz is not None before calling isoformat
                print(f"  DB Quartz Next:   {db_next_fire_time_quartz.isoformat() if db_next_fire_time_quartz else 'None'}")

                if db_next_fire_time_quartz is None:
                    next_sync_status = "DB_QUARTZ_NEXT_MISSING"
                    # Only append DEVIATION if not already set by prev time check
                    if "DEVIATION" not in overall_sync_summary: 
                        overall_sync_summary = "DEVIATION: DB Quartz Next Fire Time is missing."
                    else: # If prev was already a deviation, append this one
                        overall_sync_summary += " & DB Quartz Next Missing."
                elif abs(croniter_next_fire_time - db_next_fire_time_quartz) <= tolerance:
                    next_sync_status = "IN_SYNC"
                else:
                    next_sync_status = "NEXT_TIME_MISMATCH"
                    # Only append DEVIATION if not already set by prev time check
                    if "DEVIATION" not in overall_sync_summary: 
                           overall_sync_summary = f"DEVIATION: Next Fire Time Mismatch. Expected {croniter_next_fire_time.isoformat()}, DB had {db_next_fire_time_quartz.isoformat()}"
                    else: # If prev was already a deviation, append this one
                           overall_sync_summary += f" & Next Fire Time Mismatch. Expected {croniter_next_fire_time.isoformat()}, DB had {db_next_fire_time_quartz.isoformat()}"
            else: # croniter_next_fire_time is None
                next_sync_status = "NO_CRONITER_NEXT"
                # If DB Quartz Next is also None, it might be expected
                if db_next_fire_time_quartz is None:
                    if overall_sync_summary == "INFO: No Prev Fire Time (DB & Croniter).":
                        overall_sync_summary = "INFO: No Fire Times (DB & Croniter)."
                    elif overall_sync_summary == "N/A": # Only if no other status set yet
                        overall_sync_summary = "INFO: Croniter cannot calculate Next."
                else:
                    if "DEVIATION" not in overall_sync_summary: # Only if not already a deviation
                        overall_sync_summary = "DEVIATION: Croniter cannot calculate Next."
                    else: # If prev was already a deviation, append this one
                        overall_sync_summary += " & Croniter cannot calculate Next."
            
            # Final check for overall sync summary if no deviation or info was set above
            if overall_sync_summary == "N/A": 
                overall_sync_summary = "SUCCESS: All in sync."
        else: # Conversion failed
            prev_sync_status = "N/A_CONVERSION_FAILED"
            next_sync_status = "N/A_CONVERSION_FAILED"
            overall_sync_summary = "CONVERSION_FAILED" # Reiterate for clarity in summary

        print(f"  Prev Time Sync Status: {prev_sync_status}")
        print(f"  Next Time Sync Status: {next_sync_status}")
        print(f"  Overall Sync Summary: {overall_sync_summary}")

        # Append data to CSV - ensure all values are strings or "None"/"N/A"
        csv_data.append({
            "Trigger_Name": trigger_name,
            "Original_Quartz_Cron_Expression": original_cron_expression,
            "Converted_Unix_Cron_Expression": unix_cron_expression if unix_cron_expression else "N/A",
            "Conversion_Status": conversion_status,
            "DB_Quartz_Prev_Fire_Time": db_prev_fire_time_quartz.isoformat() if db_prev_fire_time_quartz else "None",
            "Croniter_Calculated_Prev_Fire_Time": croniter_prev_fire_time.isoformat() if croniter_prev_fire_time else "None",
            "Prev_Time_Sync_Status": prev_sync_status,
            "DB_Quartz_Next_Fire_Time": db_next_fire_time_quartz.isoformat() if db_next_fire_time_quartz else "None",
            "Croniter_Calculated_Next_Fire_Time": croniter_next_fire_time.isoformat() if croniter_next_fire_time else "None",
            "Next_Time_Sync_Status": next_sync_status,
            "Overall_Sync_Summary": overall_sync_summary
        })
        
        print("--------------------------------------------------------------------------------")
    
    # --- Write data to CSV file ---
    if csv_data:
        # Use keys from the first actual data row (after header) if possible, or fall back to header
        # Using csv_data[0].keys() is correct as it represents the header structure
        fieldnames = csv_data[0].keys()
        try:
            with open(CSV_FILE_NAME, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                for row in csv_data[1:]: # Skip the first item which was our custom header definition
                    writer.writerow(row)
            print(f"\nAnalysis results written to '{CSV_FILE_NAME}' successfully.")
        except IOError as e:
            print(f"ERROR: Could not write CSV file '{CSV_FILE_NAME}': {e}")
    else:
        print("\nNo data to write to CSV.")
            
    print("\n--- Analysis Complete ---")
    print(f"Detailed report saved to '{CSV_FILE_NAME}'.")
    print("--------------------------")

def main():
    """
    Main function to connect to the database, fetch cron triggers, and analyze their sync status.
    """
    # --- ADDED DEBUG PRINT HERE ---
    print("DEBUG: Script started. Initializing DB connection parameters.")
    # --- END ADDED DEBUG PRINT ---

    # --- Local Database Configuration (for testing) ---
    connection_params = {
        "host": DB_HOST,
        "port": DB_PORT,
        "database": DB_NAME,
        "user": DB_USER,
        "password": DB_PASSWORD
    }

    # --- Check for missing essential DB environment variables ---
    # This simplified check ensures your hardcoded values are not empty
    if not DB_HOST or not DB_NAME or not DB_USER or not DB_PASSWORD:
        print("ERROR: Database connection parameters are not fully configured.")
        print(f"DB_HOST: '{DB_HOST}', DB_NAME: '{DB_NAME}', DB_USER: '{DB_USER}', DB_PASSWORD: {'*' * len(DB_PASSWORD) if DB_PASSWORD else 'None'}") # Print values for debugging
        print("Please ensure DB_HOST, DB_NAME, DB_USER, DB_PASSWORD are filled in the script.")
        # --- ADDED DEBUG PRINT BEFORE EXIT ---
        print("DEBUG: Exiting due to incomplete DB configuration.")
        # --- END ADDED DEBUG PRINT ---
        sys.exit(1)
        
    # --- ADDED DEBUG PRINT HERE ---
    print("DEBUG: DB parameters appear configured. Proceeding to fetch triggers.")
    # --- END ADDED DEBUG PRINT ---

    # Get current time for analysis (UTC is recommended for cron checks)
    current_analysis_time = datetime.datetime.now(datetime.timezone.utc)
    # If your QRTZ DB times are in a specific timezone, adjust current_analysis_time accordingly
    # e.g., current_analysis_time = datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=5, minutes=30))) for IST

    db_triggers = fetch_cron_triggers_from_db(connection_params)

    if not db_triggers:
        print("No cron triggers fetched from database. Exiting.")
        sys.exit(0)

    analyze_cron_quartz_sync(db_triggers, current_analysis_time)

if __name__ == "__main__":
    main()
