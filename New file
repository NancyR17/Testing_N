import os
import psycopg2
import smtplib
import logging
import datetime
from email.mime.text import MIMEText
from dotenv import load_dotenv

# Load env vars
load_dotenv()

# Setup logging
logging.basicConfig(
    filename="logs/firetime_check.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# DB connection
conn = psycopg2.connect(
    host=os.getenv("DB_HOST"),
    port=os.getenv("DB_PORT"),
    user=os.getenv("DB_USER"),
    password=os.getenv("DB_PASSWORD"),
    dbname=os.getenv("DB_NAME")
)
cur = conn.cursor()

# Query next_fire_time for today
cur.execute("""
    SELECT trigger_name, next_fire_time 
    FROM "SVC_PHM_OWNER".phm_ntfn_qrtz_triggers
    WHERE next_fire_time IS NOT NULL
    AND TO_TIMESTAMP(next_fire_time / 1000)::date = CURRENT_DATE
    ORDER BY next_fire_time ASC
""")

rows = cur.fetchall()
fire_times = [(row[0], row[1]) for row in rows]

# Close DB
cur.close()
conn.close()

# Process times
fire_times.sort(key=lambda x: x[1])
missed_times = []
log_lines = []

for idx in range(len(fire_times)):
    trigger, ts = fire_times[idx]
    dt = datetime.datetime.fromtimestamp(ts / 1000.0)
    log_lines.append(f"{idx + 1}. {trigger} → {dt}")

# Check gaps
for i in range(1, len(fire_times)):
    prev_ts = fire_times[i - 1][1]
    curr_ts = fire_times[i][1]
    gap_minutes = (curr_ts - prev_ts) / (60 * 1000)

    if gap_minutes > 15:
        missed_times.append((fire_times[i - 1], fire_times[i], gap_minutes))

# Log results
with open("logs/firetime_check.log", "a") as log_file:
    log_file.write("\n--- Run at {} ---\n".format(datetime.datetime.now()))
    log_file.write("Total next_fire_time entries in past 24 hours: {}\n".format(len(fire_times)))
    log_file.write("Expected entries: 96\n")
    log_file.write("Missed entries (gap > 15 mins): {}\n\n".format(len(missed_times)))

    for line in log_lines:
        log_file.write(line + "\n")

    if missed_times:
        log_file.write("\n⚠️ Missed Entries:\n")
        for prev, curr, gap in missed_times:
            prev_dt = datetime.datetime.fromtimestamp(prev[1] / 1000.0)
            curr_dt = datetime.datetime.fromtimestamp(curr[1] / 1000.0)
            log_file.write(f"Missed between {prev_dt} → {curr_dt} | Gap: {gap:.2f} mins\n")

# Print summary on screen
print("\n===== Fire Time Summary (Past 24 Hours) =====")
print(f"Total entries found         : {len(fire_times)}")
print(f"Expected entries (every 15m): 96")
print(f"Missed entries (gap > 15m)  : {len(missed_times)}")
print("=============================================\n")

if missed_times:
    print("⚠️ Missed Time Gaps:")
    for prev, curr, gap in missed_times:
        prev_dt = datetime.datetime.fromtimestamp(prev[1] / 1000.0)
        curr_dt = datetime.datetime.fromtimestamp(curr[1] / 1000.0)
        print(f"{prev_dt} → {curr_dt} | Gap: {gap:.2f} mins")

    # Send email alert
    body = "❌ PHM Notification Gaps Detected:\n\n"
    for prev, curr, gap in missed_times:
        prev_dt = datetime.datetime.fromtimestamp(prev[1] / 1000.0)
        curr_dt = datetime.datetime.fromtimestamp(curr[1] / 1000.0)
        body += f"{prev_dt} → {curr_dt} | Gap: {gap:.2f} mins\n"

    msg = MIMEText(body)
    msg['Subject'] = "🚨 PHM Notification Gap Detected"
    msg['From'] = os.getenv("EMAIL_FROM")
    msg['To'] = os.getenv("EMAIL_TO")

    with smtplib.SMTP(os.getenv("SMTP_HOST"), int(os.getenv("SMTP_PORT"))) as server:
        server.sendmail(msg['From'], [msg['To']], msg.as_string())

    print("\n📧 Alert email sent.\n")
else:
    print("✅ All gaps within 15 minutes.\n")
