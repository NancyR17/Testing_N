import psycopg2
import smtplib
from email.message import EmailMessage
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
import logging

# Load environment variables
load_dotenv()

DB_HOST = os.getenv("DB_HOST")
DB_PORT = os.getenv("DB_PORT")
DB_NAME = os.getenv("DB_NAME")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")

SMTP_HOST = os.getenv("EMAIL_HOST")
SMTP_PORT = int(os.getenv("EMAIL_PORT", "25"))
EMAIL_FROM = os.getenv("EMAIL_FROM")
EMAIL_TO = os.getenv("EMAIL_TO")

# Setup logging
log_dir = "logs"
os.makedirs(log_dir, exist_ok=True)
log_file = os.path.join(log_dir, f"log_{datetime.now().strftime('%Y-%m-%d')}.txt")
logging.basicConfig(filename=log_file, level=logging.INFO, format='%(asctime)s - %(message)s')

def convert_epoch_ms_to_datetime(epoch_ms):
    return datetime.fromtimestamp(epoch_ms / 1000)

def send_email(subject, body):
    msg = EmailMessage()
    msg["Subject"] = subject
    msg["From"] = EMAIL_FROM
    msg["To"] = EMAIL_TO
    msg.set_content(body)

    with smtplib.SMTP(SMTP_HOST, SMTP_PORT) as server:
        server.send_message(msg)

def main():
    conn = psycopg2.connect(
        host=DB_HOST,
        port=DB_PORT,
        dbname=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD
    )
    cursor = conn.cursor()

    query = """
        SELECT trigger_name, next_fire_time
        FROM "SVC_PHM_OWNER".phm_ntfn_qrtz_triggers
        WHERE to_timestamp(next_fire_time / 1000)::date = CURRENT_DATE
        ORDER BY next_fire_time;
    """
    cursor.execute(query)
    rows = cursor.fetchall()

    previous_time = None
    missed_times = []
    next_times_logged = []

    for row in rows:
        trigger_name, next_fire_time_ms = row
        next_time = convert_epoch_ms_to_datetime(next_fire_time_ms)
        next_times_logged.append(next_time)

        if previous_time:
            gap = (next_time - previous_time).total_seconds() / 60
            if gap > 15:
                missed_times.append((previous_time, next_time, gap))
        previous_time = next_time

    # Logging
    logging.info(f"Total next_fire_time entries found today: {len(next_times_logged)}")
    for time in next_times_logged:
        logging.info(f"Next Fire Time: {time}")

    if missed_times:
        body = "Missed Fire Time Gaps Detected:\n\n"
        for prev, curr, gap in missed_times:
            line = f"Gap of {gap:.2f} mins between {prev} and {curr}\n"
            logging.warning(line.strip())
            body += line

        send_email("Missed Fire Time Alert", body)
    else:
        logging.info("All next_fire_time entries are within the expected 15-minute gap.")

    cursor.close()
    conn.close()

if __name__ == "__main__":
    main()
