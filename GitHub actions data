рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛\! рдЕрдм рдЬрдмрдХрд┐ рд╕рднреА рд▓реЙрдЬрд┐рдХ рдФрд░ рд░рд┐рдХреНрд╡рд╛рдпрд░рдореЗрдВрдЯреНрд╕ рдХреНрд▓рд┐рдпрд░ рд╣реИрдВ, рдпрд╣рд╛рдБ рдЖрдкрдХреЗ рд▓рд┐рдП **рд╢реБрд░реБрдЖрдд рд╕реЗ рд▓реЗрдХрд░ рдЕрдВрдд рддрдХ** рд╣рд░ рдЪреАрдЬрд╝ рдХреЗ рд▓рд┐рдП рдПрдХ рдЕрдВрддрд┐рдо, рд╡рд┐рд╕реНрддреГрдд (comprehensive) рдФрд░ рдХреНрд░рдордмрджреНрдз (step-by-step) рдорд╛рд░реНрдЧрджрд░реНрд╢рд┐рдХрд╛ (guide) рд╣реИред

рд╣рдо рдЗрд╕ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХреЛ рддреАрди рдореБрдЦреНрдп рдЪрд░рдгреЛрдВ рдореЗрдВ рд╡рд┐рднрд╛рдЬрд┐рдд рдХрд░реЗрдВрдЧреЗред

-----

## рдЪрд░рдг 1: Git Mirroring рдФрд░ Access Keys рдХрд╛ рд╕реЗрдЯрдЕрдк

рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддрд╛ рд╣реИ рдХрд┐ рдЖрдкрдХрд╛ Bitbucket рдХреЛрдб рд╕реБрд░рдХреНрд╖рд┐рдд рд░реВрдк рд╕реЗ GitHub рдкрд░ sync рд╣реЛ рдЬрд╛рдП рдФрд░ GitHub Actions рдХреЛ Bitbucket рддрдХ рдкрд╣реБрдБрдЪрдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рдорд┐рд▓ рдЬрд╛рдПред

| Step | Action | Detail / Command |
| :--- | :--- | :--- |
| **1.1 GitHub Repo** | рдПрдХ **рдирдпрд╛, рдЦрд╝рд╛рд▓реА (empty)** GitHub repository рдмрдирд╛рдПрдБред (рдХреЛрдИ README рдпрд╛ files initialize рди рдХрд░реЗрдВ)ред | `github.com/new` |
| **1.2 Mirror Clone** | Local machine рдкрд░ Bitbucket repo рдХреЛ **mirror clone** рдХрд░реЗрдВред | `git clone --mirror <Bitbucket-Repo-URL>` |
| **1.3 Push to GitHub** | Clone рдХреА рдЧрдИ directory (`<repo-name>.git`) рдореЗрдВ рдЬрд╛рдХрд░, рдХреЛрдб рдХреЛ GitHub рдкрд░ push рдХрд░реЗрдВред | `cd <repo-name>.git` $\rightarrow$ `git remote add github <GitHub-Repo-URL>` $\rightarrow$ `git push --mirror github` |
| **1.4 Generate SSH Key** | SSH key pair рдмрдирд╛рдПрдБ (рдкрд╛рд╕рд╡рд░реНрдб рдЦрд╝рд╛рд▓реА рдЫреЛрдбрд╝ рджреЗрдВ)ред | `ssh-keygen -t rsa -b 4096 -f ~/.ssh/github_sync_key` |
| **1.5 Bitbucket Key** | **Public Key** (`github_sync_key.pub`) рдХреЛ Bitbucket рдореЗрдВ **Repository Settings** $\rightarrow$ **Access Keys** рдореЗрдВ **Read/Write** access рдХреЗ рд╕рд╛рде add рдХрд░реЗрдВред | |
| **1.6 GitHub Secret** | **Private Key** (`github_sync_key`) рдХреЛ GitHub mirror repo рдореЗрдВ **Settings** $\rightarrow$ **Secrets** $\rightarrow$ **Actions** рдореЗрдВ **`BITBUCKET_SSH_PRIVATE_KEY`** рдирд╛рдо рд╕реЗ рд╕реНрдЯреЛрд░ рдХрд░реЗрдВред | |

-----

## рдЪрд░рдг 2: GitHub Environment рдФрд░ Secrets рдХрд╛ рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди

рдпрд╣ CI/CD pipeline рдХреЗ рд▓рд┐рдП рдЖрд╡рд╢реНрдпрдХ рд╕реБрд░рдХреНрд╖рд┐рдд рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдФрд░ рд╡рд╛рддрд╛рд╡рд░рдг-рдЖрдзрд╛рд░рд┐рдд рдЕрд▓рдЧрд╛рд╡ (isolation) рдХреЛ рд╕реНрдерд╛рдкрд┐рдд рдХрд░рддрд╛ рд╣реИред

| Step | Action | Detail |
| :--- | :--- | :--- |
| **2.1 Environments** | GitHub repo рдореЗрдВ **Settings** $\rightarrow$ **Environments** рдореЗрдВ рдЬрд╛рдПрдБ рдФрд░ рддреАрди рд╡рд╛рддрд╛рд╡рд░рдг рдмрдирд╛рдПрдБ: **`dev`**, **`qa`**, рдФрд░ **`prod`**ред | |
| **2.2 Protection** | **`qa`** рдФрд░ **`prod`** рд╡рд╛рддрд╛рд╡рд░рдг рдореЗрдВ **Required Reviewers** on рдХрд░реЗрдВ (manual deployment approval рдХреЗ рд▓рд┐рдП)ред | **`dev`** рд╡рд╛рддрд╛рд╡рд░рдг рдХреЛ рдЦреБрд▓рд╛ рд░рдЦреЗрдВ (automatic deployment рдХреЗ рд▓рд┐рдП)ред |
| **2.3 K8s Secret** | **`K8S_CONFIG`** Secret рдмрдирд╛рдПрдБ рдФрд░ рдЗрд╕реЗ **рд╕рднреА рддреАрдиреЛрдВ Environments** (`dev`, `qa`, `prod`) рдореЗрдВ рдЕрдкрдиреЗ single cluster kubeconfig file рдХреЗ рд╕рд╛рде рд╕реНрдЯреЛрд░ рдХрд░реЗрдВред | |
| **2.4 DB Secrets** | **`DB_URL`**, **`DB_USERNAME`**, рдФрд░ **`DB_PASSWORD`** secrets рдмрдирд╛рдПрдБред | рдЗрдиреНрд╣реЗрдВ **рд╣рд░ Environment** рдХреЗ рдЕрдВрджрд░ рдЬрд╛рдХрд░ **environment-specific values** рдХреЗ рд╕рд╛рде рд╕реНрдЯреЛрд░ рдХрд░реЗрдВред (рдирд╛рдо рд╣рд░ рдЬрдЧрд╣ рдПрдХ рдЬреИрд╕рд╛ рд░рд╣реЗрдЧрд╛, рд╡реИрд▓реНрдпреВ рдмрджрд▓ рдЬрд╛рдПрдЧреА)ред |
| **2.5 Codebase Update** | `$application.properties$` рдлрд╝рд╛рдЗрд▓ рдХреЛ codebase рдореЗрдВ update рдХрд░реЗрдВ рддрд╛рдХрд┐ рд╡рд╣ **placeholders** рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗ, рди рдХрд┐ hardcoded values рдХрд╛ред | Example: `spring.datasource.url=${DB_URL}` |

-----

## рдЪрд░рдг 3: Workflows рдХрд╛ рдирд┐рд░реНрдорд╛рдг (Pipelines)

GitHub mirror repository рдореЗрдВ `.github/workflows/` folder рдХреЗ рдЕрдВрджрд░ рдпреЗ рддреАрди рдлрд╝рд╛рдЗрд▓реЗрдВ рдмрдирд╛рдПрдБред

### 3.1 Workflow 1: Sync Workflow (`.github/workflows/sync.yml`)

рдпрд╣ Bitbucket рдФрд░ GitHub рдХреЗ рдмреАрдЪ рд╣рд░ рдорд┐рдирдЯ sync рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддрд╛ рд╣реИред

```yaml
# ... (Use the final sync.yml content provided in previous responses)
name: ЁЯФД Bitbucket to GitHub Sync (Every Minute)
on:
  schedule:
    - cron: '* * * * *' 
# ... [rest of the sync logic]
```

### 3.2 Workflow 2: Frontend (UI) Deploy (`.github/workflows/ui_deploy.yml`)

Dev рдореЗрдВ automatic deployment рдФрд░ QA/Prod рдореЗрдВ manual deployment рдХрд╛ Logicред

```yaml
name: ЁЯМР Frontend UI Deploy

on:
  push:
    branches: [ master ] # Change to feature branch for testing
    paths: [ 'ui/**' ]
  workflow_dispatch:
    inputs:
      target_env:
        description: 'Target Environment (qa or prod)'
        required: true
        type: choice
        options: [ qa, prod ]

jobs:
  determine_target:
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.set_env.outputs.env }}
    steps:
      - id: set_env
        run: |
          # If push, set to dev. Else, use user input (qa/prod).
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "env=dev" >> $GITHUB_OUTPUT
          else
            echo "env=${{ github.event.inputs.target_env }}" >> $GITHUB_OUTPUT
          fi

  ui_pipeline:
    needs: determine_target
    environment: ${{ needs.determine_target.outputs.env }}
    runs-on: ubuntu-latest
    steps:
      - name: ЁЯЪЪ Checkout Code
        uses: actions/checkout@v4

      - name: ЁЯУж Build UI
        run: |
          TARGET_ENV=${{ needs.determine_target.outputs.env }}
          npm install
          npm run build:${TARGET_ENV} # Runs dev, qa, or prod build script

      # ... [Docker Build and Push steps] ...
          
      - name: ЁЯЪА Deploy to K8s Namespace
        uses: azure/k8s-set-context@v3
        with:
            kubeconfig: ${{ secrets.K8S_CONFIG }}
            
        - name: K8s Apply Manifests
          run: |
            NAMESPACE=${{ needs.determine_target.outputs.env }}
            # Deploy using the correct namespace and manifest folder
            kubectl apply -f k8s-manifests/${NAMESPACE}/ui-deployment.yaml -n ${NAMESPACE}
```

### 3.3 Workflow 3: Backend (Web API & ETL) Deploy (`.github/workflows/backend_deploy.yml`)

рдпрд╣ UI workflow рдХреА рддрд░рд╣ рд╣реА рд╣реИ рд▓реЗрдХрд┐рди рдЗрд╕рдореЗрдВ Java build, artifacts рдФрд░ configuration injection рд╢рд╛рдорд┐рд▓ рд╣реИрдВред

```yaml
# ... (Use the final backend_deploy.yml logic, copying the determine_target job) ...

jobs:
  build_all:
    # mvn clean install step (runs only once)
    # Upload Artifacts (JARs, manifests)

  web_api_deploy:
    needs: build_all
    environment: ${{ needs.determine_target.outputs.env }}
    steps:
      - name: ЁЯУе Download Artifacts
      - name: ЁЯФД Configure Properties (Web API)
        run: |
          # Inject DB_URL, DB_USERNAME, DB_PASSWORD from environment secrets
          echo "spring.datasource.url=${{ secrets.DB_URL }}" >> web-api/src/main/resources/application.properties
          # ... [Other injections] ...
      - name: ЁЯЪА Deploy Web API to K8s Namespace
        run: |
          NAMESPACE=${{ needs.determine_target.outputs.env }}
          kubectl apply -f web-api/k8s-manifests/${NAMESPACE}/deployment.yaml -n ${NAMESPACE}

  etl_client_deploy:
    # ... (Same logic as web_api_deploy for ETL client) ...
```
